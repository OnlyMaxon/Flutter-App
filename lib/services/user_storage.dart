import 'dart:convert';
import 'dart:io';
import 'package:path_provider/path_provider.dart';
import 'package:collection/collection.dart';
import '../pages/registration/registration_data.dart';





/// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –≥–¥–µ –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
Future<File> _getUsersFile() async {
  final dir = await getApplicationDocumentsDirectory();
  return File('${dir.path}/users.json');
}

/// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
Future<void> saveUsers(List<UserRegistrationData> users) async {
  final file = await _getUsersFile();
  final jsonList = users.map((u) => u.toJson()).toList();
  await file.writeAsString(jsonEncode(jsonList));
}

/// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
Future<List<UserRegistrationData>> loadUsers() async {
  final file = await _getUsersFile();
  if (await file.exists()) {
    final contents = await file.readAsString();
    if (contents.trim().isEmpty) return []; // üëà –∑–∞—â–∏—Ç–∞ –æ—Ç –ø—É—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
    final List<dynamic> jsonList = jsonDecode(contents);
    return jsonList.map((j) => UserRegistrationData.fromJson(j)).toList();
  }
  return [];
}

/// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
Future<void> addUser(UserRegistrationData user) async {
  final users = await loadUsers();
  users.add(user);
  await saveUsers(users);
}

/// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
Future<UserRegistrationData?> loadCurrentUser() async {
  final users = await loadUsers();
  return users.firstWhereOrNull((u) => u.isLoggedIn == true);
}

/// –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
Future<void> saveCurrentUser(UserRegistrationData user) async {
  final users = await loadUsers();

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —É –≤—Å–µ—Ö
  for (var u in users) {
    u.isLoggedIn = false;
  }

  // –ï—Å–ª–∏ —é–∑–µ—Ä —É–∂–µ –µ—Å—Ç—å ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º, –∏–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º
  final index = users.indexWhere((u) => u.email == user.email);
  user.isLoggedIn = true;
  if (index != -1) {
    users[index] = user;
  } else {
    users.add(user);
  }

  await saveUsers(users);
}

/// –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã)
Future<void> deleteAllUsers() async {
  final file = await _getUsersFile();
  if (await file.exists()) {
    await file.delete();
  }
}

/// –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
Future<void> initTestUser() async {
  final users = await loadUsers();
  final exists = users.any((u) => u.email == "test@email.com");
  if (!exists) {
    final testUser = UserRegistrationData(
      email: "test@email.com", // üëà —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
      password: "123456",
      firstName: "Orucov",
      lastName: "Max",
      nickname: "Maxon",
      country: "–ü–æ–ª—å—à–∞",
      nationality: "–†—É—Å—Å–∫–∏–π",
      languages: ["–†—É—Å—Å–∫–∏–π", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"],
      interests: ["Flutter", "UI/UX", "–°—Ç–∞—Ä—Ç–∞–ø—ã"],
      isStudent: false,
      isLoggedIn: false, // üëà –æ–Ω –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã–π
    );
    users.add(testUser);
    await saveUsers(users);
  }
}
