import 'package:flutter/material.dart';
import '../data/repositories/forum_repository.dart';
import '../services/user_storage.dart'; // ‚úÖ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ–π user_storage

class CreateForumPage extends StatefulWidget {
  const CreateForumPage({super.key});

  @override
  State<CreateForumPage> createState() => _CreateForumPageState();
}

class _CreateForumPageState extends State<CreateForumPage> {
  final _title = TextEditingController();
  final _desc = TextEditingController();
  final _tags = TextEditingController();
  bool _loading = false;

  final _forums = ForumRepository();

  Future<void> _submit() async {
    setState(() => _loading = true);
    try {
      // ‚úÖ –ë–µ—Ä—ë–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ user_storage
      final user = await loadCurrentUser();
      if (user == null) throw StateError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');

      final tags = _tags.text
          .split(',')
          .map((e) => e.trim())
          .where((e) => e.isNotEmpty)
          .toList();

      // ‚úÖ ownerId = email (–∏–ª–∏ –º–æ–∂–Ω–æ user.id, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ UserRegistrationData)
      await _forums.create(
        title: _title.text,
        description: _desc.text,
        ownerId: user.email, // üëà –∫–ª—é—á–µ–≤–∞—è —Å–≤—è–∑—å
        tags: tags,
      );

      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('–§–æ—Ä—É–º —Å–æ–∑–¥–∞–Ω')),
      );
      Navigator.pop(context);
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('–û—à–∏–±–∫–∞: $e')),
      );
    } finally {
      if (mounted) setState(() => _loading = false);
    }
  }

  @override
  void dispose() {
    _title.dispose();
    _desc.dispose();
    _tags.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('–°–æ–∑–¥–∞—Ç—å —Ñ–æ—Ä—É–º')),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            TextField(
              controller: _title,
              decoration: const InputDecoration(labelText: '–ù–∞–∑–≤–∞–Ω–∏–µ'),
            ),
            const SizedBox(height: 12),
            TextField(
              controller: _desc,
              maxLines: 3,
              decoration: const InputDecoration(labelText: '–û–ø–∏—Å–∞–Ω–∏–µ'),
            ),
            const SizedBox(height: 12),
            TextField(
              controller: _tags,
              decoration: const InputDecoration(labelText: '–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)'),
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: _loading ? null : _submit,
              child: _loading
                  ? const SizedBox(
                height: 20,
                width: 20,
                child: CircularProgressIndicator(strokeWidth: 2),
              )
                  : const Text('–°–æ–∑–¥–∞—Ç—å'),
            ),
          ],
        ),
      ),
    );
  }
}
